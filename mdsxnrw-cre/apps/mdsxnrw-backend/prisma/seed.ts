import { PrismaClient } from '@prisma/client';

// initialize Prisma Client
const prisma = new PrismaClient();

async function main() {
  const connector1_edc = await prisma.connector.upsert({
    where: { connectorName: 'Eclipse Dataspace Components Connector' },
    update: {},
    create: {
      connectorDescription:
        'Whatever the individual setup is – on-premises bare-metal, different cloud vendors, hybrid, even single end-user machines – the EDC can be customized to work within any environment at scale. The connector’s added value is achieved through the separation of control and data plane, which enables a modular and thereby customizable way to build data spaces. Due to common interfaces and mapping of existing standards, the connector adds capabilities of contract negotiating and policy handling in an interoperable manner. As an open-source project hosted by the Eclipse Foundation, it provides a growing list of modules for many widely deployed cloud environments “out-of-the-box” and can easily be extended for more customized environments, while avoiding any intellectual property rights (IPR) headaches.',
      connectorName: 'Eclipse Dataspace Components Connector',
      connectorLogo: null,
      connectorMaintainer: 'Commiter Group in Eclipse Foundation',
      connectorType: 'data_connector_framework',
      connectorVersion: '0.1.2',
      connectorWebsite: 'https://projects.eclipse.org/projects/technology.edc',
      connectorEmail: 'edc-community@eclipse.org',
      contactForename: 'Julia',
      contactName: 'Pampus',
      contactLocation: 'Dortmund',
      deploymentType: ['edge', 'cloud', 'on_premises'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'apache_2_0',
      fte: 'department',
      selfImplementation: true,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 120.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https', 'idscp_v2'],
      trl: 9,
      references: 'Catena-X; Eona-X; Health-X DataLOFT',
      serviceLevel: ['self_service'],
    },
  });

  const connector2_sovity = await prisma.connector.upsert({
    where: { connectorName: 'sovity Connector' },
    update: {},
    create: {
      connectorDescription:
        'The easiest access to sovereign data exchange with Connector-as-a-Service: Industry-ready Connector based on open-source software Eclipse Dataspace Components (EDC). The sovity Connector is used as managed solution compliant with key data space initiatives like IDSA, Catena-X or Mobility Data Space.',
      connectorName: 'sovity Connector',
      connectorLogo: null,
      connectorMaintainer: 'sovity GmbH',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '1.0',
      connectorWebsite: 'https://sovity.de/',
      connectorEmail: 'contact@sovity.de',
      contactForename: 'Sebastian',
      contactName: 'Kleff',
      contactLocation: 'Dortmund',
      deploymentType: ['cloud'],
      durationFrom: 1,
      durationTo: 1,
      durationUnit: 'days',
      openSource: 'closedsource',
      license: 'apache_2_0', // TODO which License here
      fte: 'single_person',
      selfImplementation: false,
      gui: true,
      dsSpecificGui: false,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: ['data_consumer', 'data_provider'],
      itKnowhow: 'low',
      payment: true,
      pricingModel: null, //TODO ----------- FROM HERE FILL VALUES SOON ---------------------
      price: 90.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null, // TODO ------------- TO HERE FILL VALUES SOON ---------------
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['idscp_v2'],
      trl: 9,
      references:
        'Mobility Data Space; Catena-X; IDSA Testbed; Demand and capacity app',
      serviceLevel: ['caas'],
    },
  });

  const connector3_dihc = await prisma.connector.upsert({
    where: { connectorName: 'Data Intelligence Hub Connector' },
    update: {},
    create: {
      connectorDescription:
        'Based on the Eclipse Data Connector (EDC) – an up-andcoming, extensible connector development framework. We provide managed EDC service which is compliant with IDSA specification as well as DSC.',
      connectorName: 'Data Intelligence Hub Connector',
      connectorLogo: null,
      connectorMaintainer: 'T-Systems International GmbH',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.1.3',
      connectorWebsite: 'https://dih.telekom.net/',
      connectorEmail: 'info@t-systems.com',
      contactForename: 'Sven',
      contactName: 'Löffler',
      contactLocation: 'Frankfurt am Main',
      deploymentType: ['cloud'],
      durationFrom: 1,
      durationTo: 1,
      durationUnit: 'days',
      openSource: 'closedsource',
      license: 'apache_2_0', // TODO which License here
      fte: 'single_person',
      selfImplementation: false,
      gui: true,
      dsSpecificGui: false,
      cloudNeeded: true,
      cloud: 'mycloud',
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: ['data_consumer', 'data_provider'],
      itKnowhow: 'low',
      payment: true,
      pricingModel: null, //TODO ----------- FROM HERE FILL VALUES SOON ---------------------
      price: 105.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null, // TODO ------------- TO HERE FILL VALUES SOON ---------------
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['idscp_v2'],
      trl: 9,
      references: 'GAIA-X 4 Future Mobility',
      serviceLevel: ['caas'],
    },
  });

  const connector4_truzzt = await prisma.connector.upsert({
    where: { connectorName: 'Intel IONOS Orbiter Connector' },
    update: {},
    create: {
      connectorDescription:
        'IoT Version of IDS Connector – compatible to EDC, Extra resource-saving executable for sensors and small devices, Rust & C based',
      connectorName: 'Intel IONOS Orbiter Connector',
      connectorLogo: null,
      connectorMaintainer: 'truzzt',
      connectorType: 'generic_opensource_solution',
      connectorVersion: '4.0',
      connectorWebsite: 'https://www.truzztbox.org/',
      connectorEmail: '',
      contactForename: '',
      contactName: '',
      contactLocation: '',
      deploymentType: ['cloud'],
      durationFrom: 1,
      durationTo: 2,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'apache_2_0',
      fte: 'single_person',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 100.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: false,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https', 'multipart'],
      trl: 9,
      references: 'truzzt Box',
      serviceLevel: ['caas', 'paas', 'self_service'],
    },
  });

  const connector5_cefriel = await prisma.connector.upsert({
    where: { connectorName: 'AI.SOV Connector' },
    update: {},
    create: {
      connectorDescription:
        'The AI.SOV connector is built upon the Fraunhofer open connector plus a resources catalogue created by Cefriel levaraging the KCong asset. The asset obtained is a user-friendly data exchange platform for the supply chain domain compliant to the IDS data sovereignty concept.',
      connectorName: 'AI.SOV Connector',
      connectorLogo: null,
      connectorMaintainer: 'Cefriel',
      connectorType: 'generic_solution',
      connectorVersion: '4.1',
      connectorWebsite: 'https://www.cefriel.com/',
      connectorEmail: 'info@cefriel.com',
      contactForename: '',
      contactName: '',
      contactLocation: 'Milan',
      deploymentType: ['cloud'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'closedsource',
      license: 'unlicense',
      fte: 'single_person',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 80.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['idscp_v2'],
      trl: 7,
      references: 'Whirpool, Sonae Arauco',
      serviceLevel: ['paas'],
    },
  });

  const connector6_huawei = await prisma.connector.upsert({
    where: { connectorName: 'Boot-X Connector' },
    update: {},
    create: {
      connectorDescription:
        'The Boot-X is Gaia-X / IDSA compliance ready, cloud-based Data Space implementation. The main focus is on cross-border data exchange, e.g. following international standards for data exchange between Chinese and European industries. Boot-X Connector is compatible to Eclipse Data Space connector, with enhanced features like local data policy, Self-Sovereign identity federation and compliance monitoring.',
      connectorName: 'Boot-X Connector',
      connectorLogo: null,
      connectorMaintainer: 'Huawei, Munich Research Center',
      connectorType: 'generic_solution',
      connectorVersion: '0.1.2',
      connectorWebsite: 'https://www.boot-x.eu/',
      connectorEmail: 'atul.shrivijay.athavale@huawei.com',
      contactForename: 'Atul',
      contactName: 'Athavale',
      contactLocation: '',
      deploymentType: ['cloud', 'on_premises'],
      durationFrom: 1,
      durationTo: 2,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'mit_license',
      fte: 'single_person',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 110.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 7,
      references: 'GAIA-X, IDSA',
      serviceLevel: ['caas', 'paas'],
    },
  });

  const connector7_eci = await prisma.connector.upsert({
    where: { connectorName: 'ECI Gatewise IDS Connector powered by TNO' },
    update: {},
    create: {
      connectorDescription:
        'By using the cloud-based IDS connector, companies affiliated with a SCSN Service Provider can digitally exchange supply chain related messages with companies affiliated with another SCSN Service Provider.',
      connectorName: 'ECI Gatewise IDS Connector powered by TNO',
      connectorLogo: null,
      connectorMaintainer: 'ECI Software Solutions and TNO',
      connectorType: 'data_connector_framework',
      connectorVersion: '0.1.2',
      connectorWebsite: 'https://www.tno.nl/en/',
      connectorEmail: 'info@tno.nl',
      contactForename: '',
      contactName: '',
      contactLocation: '',
      deploymentType: ['cloud'],
      durationFrom: 7,
      durationTo: 8,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'unlicense',
      fte: 'department',
      selfImplementation: false,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 95.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: false,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['ids_rest'],
      trl: 9,
      references: '',
      serviceLevel: ['caas', 'self_service'],
    },
  });

  const connector8_edgeds = await prisma.connector.upsert({
    where: { connectorName: 'EdgeDS Connector' },
    update: {},
    create: {
      connectorDescription:
        'The connector is based on the open-source Dataspace Connector by Fraunhofer ISST. It has been adapted to be incorporated within a MEC Platform for Edge Computing applications, therefore combining the IDS capabilities and the ETSI Multi-access Edge Computing (MEC) Architectural Framework.',
      connectorName: 'EdgeDS Connector',
      connectorLogo: null,
      connectorMaintainer: 'Intracom Telecom',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.2.7',
      connectorWebsite: 'https://www.intracom-telecom.com/',
      connectorEmail: '	info@intracom-telecom.com',
      contactForename: '',
      contactName: '',
      contactLocation: 'Athens, Greece',
      deploymentType: ['cloud', 'on_premises', 'edge'],
      durationFrom: 2,
      durationTo: 3,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'apache_2_0',
      fte: 'large_team',
      selfImplementation: true,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 105.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 4,
      references: 'IDSAs Data Space Radar',
      serviceLevel: ['caas'],
    },
  });

  const connector9_egi = await prisma.connector.upsert({
    where: { connectorName: 'EGI DataHub Connector' },
    update: {},
    create: {
      connectorDescription:
        'The EGI DataHub Connector is based on the Dataspace Connector available open source. Policy based access via IDS to multiple storage backends supported by EGI DataHub (e.g. S3, Swift, NFS, GlusterFS, etc). The EGI DataHub is a high-performance data management solution that offers unified data access across globally distributed environments and multiple types of underlying storage, allowing users to share, collaborate and perform computations on the stored data easily.',
      connectorName: 'EGI DataHub Connector',
      connectorLogo: null,
      connectorMaintainer: 'EGI Foundation',
      connectorType: 'generic_opensource_solution',
      connectorVersion: '4.2.7',
      connectorWebsite: 'https://www.egi.eu/service/datahub/',
      connectorEmail: 'contact@egi.eu',
      contactForename: '',
      contactName: '',
      contactLocation: 'Amsterdam',
      deploymentType: ['on_premises', 'cloud'],
      durationFrom: 3,
      durationTo: 4,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'unlicense',
      fte: 'small_team',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 115.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: false,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['multipart'],
      trl: 4 - 5,
      references: 'EUHubs4Data',
      serviceLevel: ['paas'],
    },
  });

  const connector10_fiware = await prisma.connector.upsert({
    where: { connectorName: 'FIWARE Data Space Connector' },
    update: {},
    create: {
      connectorDescription:
        'Highly modular and scalable Data Space Connector following DSBA Technical Convergence recommendation.',
      connectorName: 'FIWARE Data Space Connector',
      connectorLogo: null,
      connectorMaintainer: 'FIWARE Foundation',
      connectorType: 'generic_opensource_solution',
      connectorVersion: '4.2.7',
      connectorWebsite: 'https://www.fiware.org/',
      connectorEmail: '',
      contactForename: '',
      contactName: '',
      contactLocation: 'Amsterdam',
      deploymentType: ['on_premises', 'cloud'],
      durationFrom: 3,
      durationTo: 4,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'unlicense',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 85.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 6 - 7,
      references: 'DOME Marketplace',
      serviceLevel: ['caas', 'self_service'],
    },
  });

  const connector11_gate = await prisma.connector.upsert({
    where: { connectorName: 'GATE Dataspace Connector' },
    update: {},
    create: {
      connectorDescription:
        'GATE Dataspace connector is based on IDS reference implementation and is fully integrated with other components of IDS RAM, namely the Identity provider, the Metadata Broker, the Clearing House, the Vocabulary Hub and the App Store. Digital identities of interacting components are used to ensure trustful message exchange. The connector supports provision of resources via static values, files, APIs and databases. It implement various policies for data usage and follows the negotiation process required for establishing data sharing between two participants. The accompanying UI provides a better user experience with comprehensive functionality for data exchange, metadata search and data application usage.',
      connectorName: 'GATE Dataspace Connector',
      connectorLogo: null,
      connectorMaintainer: 'GATE Institute',
      connectorType: 'generic_opensource_solution',
      connectorVersion: '4.2.7',
      connectorWebsite: 'https://gate-ai.eu/en/home/',
      connectorEmail: 'contact@gate-ai.eu',
      contactForename: '',
      contactName: '',
      contactLocation: '',
      deploymentType: ['on_premises'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'apache_2_0',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 105.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: false,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['multipart', 'idscp_v2'],
      trl: 5,
      references: '',
      serviceLevel: ['paas'],
    },
  });

  const connector12_gdso = await prisma.connector.upsert({
    where: { connectorName: 'GDSO Connector - Tyre Information Service' },
    update: {},
    create: {
      connectorDescription:
        'Communication protocol based on a rest API with a vocabulary made of standardized data set for all GDSO Members, the meta data broker is a resolver that provides information about the endpoints offered by GDSO Members. Data usage policies allow also to initiate the B2B contract negotiation between GDSO Members and Data users by connecting the parties, but to be managed and finalized outside GDSO.',
      connectorName: 'GDSO Connector - Tyre Information Service',
      connectorLogo: null,
      connectorMaintainer: 'GDSO',
      connectorType: 'generic_solution',
      connectorVersion: '4.2.7',
      connectorWebsite: 'https://gdso.org/Home',
      connectorEmail: 'info@gdso.org',
      contactForename: '',
      contactName: '',
      contactLocation: 'Etterbeek, Belgien',
      deploymentType: ['edge', 'on_premises', 'cloud'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'mit_license',
      fte: 'large_team',
      selfImplementation: true,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 125.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['ids_rest'],
      trl: 9,
      references: '',
      serviceLevel: ['paas'],
    },
  });

  const connector13_holonix = await prisma.connector.upsert({
    where: {
      connectorName: 'Kharon IDS Connector powered by the Dataspace Connector',
    },
    update: {},
    create: {
      connectorDescription:
        'The connector is embedded with a complete IoT asset management solution backed called Kharon. IoT data and augmented intelligence results are now manageable through IDS thanks to the integration of the Kharon solution with the Dataspace Connector; this enables companies to enlarge their IoT network interacting with other device providers and users in a secure way keeping sovereignty and industrial confidentiality.',
      connectorName: 'Kharon IDS Connector powered by the Dataspace Connector',
      connectorLogo: null,
      connectorMaintainer: 'HOLONIX SRL',
      connectorType: 'generic_solution',
      connectorVersion: '4.2.7',
      connectorWebsite: 'https://www.holonix.it/en/',
      connectorEmail: 'commerciale@holonix.it',
      contactForename: '',
      contactName: '',
      contactLocation: 'Meda, Italy',
      deploymentType: ['edge', 'cloud'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'unlicense',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 125.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['ids_rest'],
      trl: 7,
      references: 'Dat4Zero project European project',
      serviceLevel: ['caas', 'paas'],
    },
  });

  const connector14_mitsubi = await prisma.connector.upsert({
    where: { connectorName: 'Mitsubishi Electric Dataspace Connector' },
    update: {},
    create: {
      connectorDescription:
        'Connect an iQ-R PLC system via the Mitsubishi Electric Dataspace Connector running on an RD55UP-12-V module.',
      connectorName: 'Mitsubishi Electric Dataspace Connector',
      connectorLogo: null,
      connectorMaintainer: 'Mitsubishi Electric Europe B.V.',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.2.7', //
      connectorWebsite: 'https://de.mitsubishielectric.com/de/index.html',
      connectorEmail: '',
      contactForename: '',
      contactName: '',
      contactLocation: '',
      deploymentType: ['edge', 'cloud'],
      durationFrom: 4,
      durationTo: 5,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'apache_2_0',
      fte: 'large_team',
      selfImplementation: true,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 125.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 7,
      references: 'NTT',
      serviceLevel: ['self_service'],
    },
  });

  const connector15_oneNet = await prisma.connector.upsert({
    where: { connectorName: 'OneNet Connector' },
    update: {},
    create: {
      connectorDescription:
        'The OneNet Connector, based on TRUE Connector, aims to enable a European Energy Data Space, combining the IDS principles with the advantages of the FIWARE ecosystem ensuring a seamless and secure data exchange in a completely end-to-end decentralized approach. The main features of the OneNet Connector are: Ready-to-go, ready to be installed in any environment and integrated with existing platforms via APIs Fully integrated with the FIWARE Context Broker (in the NGSI-LD version) Offers a rich graphical user Interface for connector’s configuration and for a series of additional services (KPI’s, data exchange timeline, cross-platform services catalogue, vocabularies, etc.) Facilitates through the GUI or via API the data exchange process, and extends the interaction between data producer/consumer by providing an offered service handshake and publish/subscribe mechanisms, accordingly Integrates data harmonization tool for supporting and mapping CIM standards into NGSI/LD Can be integrated with third-party Identity Management Services Supports more than 60 different harmonized services and data profiles in the smart grid and energy field, but can be easily extended with additional services also in other domains Is completely integrated with the OneNet Orchestration Workbench and OneNet Monitoring and Analytics Dashboard, two additional tools that allows participants to deploy and evaluate their own services on data coming from the OneNet system and integrate it with analytics and data visualization.',
      connectorName: 'OneNet Connector',
      connectorLogo: null,
      connectorMaintainer: 'Engineering Ingegneria Informatica',
      connectorType: 'generic_opensource_solution',
      connectorVersion: '4.2.7', //
      connectorWebsite: 'https://www.onenet-project.eu//',
      connectorEmail: 'antonelo.monti@fit.fraunhofer.de',
      contactForename: 'Monti',
      contactName: 'Prof. Antonello',
      contactLocation: '',
      deploymentType: ['on_premises'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'apache_2_0',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 125.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 7,
      references: '',
      serviceLevel: ['caas'],
    },
  });

  const connector16_tech2B = await prisma.connector.upsert({
    where: { connectorName: 'Tech2B SCSN Connector' },
    update: {},
    create: {
      connectorDescription:
        'Via the Tech2B AppStore for industry-specific applica-tions, allowing one-click expansion of the Tech2Bs core features and enabling data spaces for SMEs',
      connectorName: 'Tech2B SCSN Connector',
      connectorLogo: null,
      connectorMaintainer: 'Tech2B',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.2.7', //
      connectorWebsite: 'https://www.tech2b.cc/de/',
      connectorEmail: 'info@tech2b.cc',
      contactForename: '',
      contactName: '',
      contactLocation: 'Bladel, Netherlands',
      deploymentType: ['cloud'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'unlicense',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 105.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 7 - 8,
      references: 'Smart Connected Supplier Network, Market 4.0',
      serviceLevel: ['caas', 'paas', 'self_service'],
    },
  });

  const connector17_tno = await prisma.connector.upsert({
    where: { connectorName: 'TNO Security Gateway (TSG)' },
    update: {},
    create: {
      connectorDescription: 'Multi-purpose connector',
      connectorName: 'TNO Security Gateway (TSG)',
      connectorLogo: null,
      connectorMaintainer: 'TNO',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.1.0', //
      connectorWebsite: 'https://tno-tsg.gitlab.io/',
      connectorEmail: 'herman.pals@tno.nl',
      contactForename: 'Herman',
      contactName: 'Pals',
      contactLocation: '',
      deploymentType: ['cloud'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'mit_license',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 105.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['https'],
      trl: 8,
      references: 'SCSN',
      serviceLevel: ['self_service'],
    },
  });

  const connector18_tritom = await prisma.connector.upsert({
    where: { connectorName: 'Tritom Enterprise Connector' },
    update: {},
    create: {
      connectorDescription:
        'Enables data source and target systems technical connectivity to the Tritom service to produce services based on data sovereignty principles. Tritom also brings together ecosystem parties and provides the capabilities to create data and service catalogues.',
      connectorName: 'Tritom Enterprise Connector',
      connectorLogo: null,
      connectorMaintainer: 'DataSpace Europe Oy',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.1.0', //
      connectorWebsite:
        'https://www.dataspace.fi/en/data-intermediation-service',
      connectorEmail: 'info@dataspace.fi',
      contactForename: '',
      contactName: '',
      contactLocation: 'Helsinki, Finland',
      deploymentType: ['cloud', 'on_premises'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'mit_license',
      fte: 'department',
      selfImplementation: true,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 95.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: false,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['ids_rest'],
      trl: 8,
      references: 'DataSpace Europe Oy',
      serviceLevel: ['paas'],
    },
  });

  const connector19_TRUE = await prisma.connector.upsert({
    where: { connectorName: 'TRUE Connector' },
    update: {},
    create: {
      connectorDescription:
        'The TRUE Connector enables the trusted data exchange in order to be an active part of an IDS Ecosystem, a virtual data space leveraging existing standards and tech- nologies, as well as governance models well accepted in the data economy, to facilitate secure and standardized data exchange and data linkage in a trusted business ecosystem. The TRUE connector is also part of the Fiware Catalogue: the integration of existing Fiware ecosystems is guaranteed by the dedicated Data APP, enabling the IDS-based interaction in a plug-and-play way.',
      connectorName: 'TRUE Connector',
      connectorLogo: null,
      connectorMaintainer: 'Engineering Ingegneria Informatica SpA',
      connectorType: 'generic_opensource_solution',
      connectorVersion: '4.2.7', //
      connectorWebsite: 'https://www.eng.it/en/',
      connectorEmail: 'info@eng-its.de',
      contactForename: '',
      contactName: '',
      contactLocation: 'Düsseldorf',
      deploymentType: ['cloud', 'on_premises', 'edge'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'gnu_gpl_3',
      fte: 'department',
      selfImplementation: true,
      gui: false,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 90.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: true,
      basedOnODRL: true,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['idscp_v2'],
      trl: 6,
      references:
        'Market4.0, AI Regio, Platoon, Circular TwAIn, Eur3ka, CLARUS, SCREAM, CiTrace',
      serviceLevel: ['caas', 'paas', 'self_service'],
    },
  });

  const connector20_edge = await prisma.connector.upsert({
    where: { connectorName: 'Trusted Supplier Connector' },
    update: {},
    create: {
      connectorDescription:
        'Usability through Configuration and Monitoring UI, tailored for Cloud, Edge and hybrid scenarios',
      connectorName: 'Trusted Supplier Connector',
      connectorLogo: null,
      connectorMaintainer: 'German Edge Cloud GmbH & Co. KG',
      connectorType: 'off_the_shelf_solution',
      connectorVersion: '4.2.7', //
      connectorWebsite: 'https://gec.io/solutions/gaia-x-dienste/',
      connectorEmail: 'info@gec.io',
      contactForename: '',
      contactName: '',
      contactLocation: 'Berlin',
      deploymentType: ['cloud', 'on_premises', 'edge'],
      durationFrom: 4,
      durationTo: 6,
      durationUnit: 'months',
      openSource: 'opensource',
      license: 'gnu_gpl_3',
      fte: 'department',
      selfImplementation: true,
      gui: true,
      dsSpecificGui: true,
      cloudNeeded: false,
      cloud: null,
      targetIndustrySectors: [
        'trade',
        'industry',
        'media',
        'tourism',
        'property',
        'healthcare',
        'service',
        'finance',
        'science',
        'others',
      ],
      targetDataspaceRoles: [
        'data_consumer',
        'data_provider',
        'service_provider',
      ],
      itKnowhow: 'high',
      payment: false,
      pricingModel: null,
      price: 90.0,
      paymentInterval: null,
      abonnementDescription: null,
      costCalculationBasis: null,
      tier1Cost: null,
      tier1PaymentInterval: null,
      tier1AbonnementDescription: null,
      tier2Cost: null,
      tier2PaymentInterval: null,
      tier2AbonnementDescription: null,
      tier3Cost: null,
      tier3PaymentInterval: null,
      tier3AbonnementDescription: null,
      tier4Cost: null,
      tier4PaymentInterval: null,
      tier4AbonnementDescription: null,
      tier5Cost: null,
      tier5PaymentInterval: null,
      tier5AbonnementDescription: null,
      regionalRestrictions: false,
      hasDocumentation: true,
      hasSupport: false,
      basedOnODRL: false,
      alternativePolicyExpressionModel: null,
      usedProtocols: ['multipart', 'https'],
      trl: 8,
      references:
        'Fraunhofer HHI, Fraunhofer HHI Digitale Signalverarbeitung, ICNAP IPT-HHI',
      serviceLevel: ['caas', 'paas', 'self_service'],
    },
  });

  console.log({
    connector1_edc,
    connector2_sovity,
    connector3_dihc,
    connector4_truzzt,
    connector5_cefriel,
    connector6_huawei,
    connector7_eci,
    connector8_edgeds,
    connector9_egi,
    connector10_fiware,
    connector11_gate,
    connector12_gdso,
    connector13_holonix,
    connector14_mitsubi,
    connector15_oneNet,
    connector16_tech2B,
    connector17_tno,
    connector18_tritom,
    connector19_TRUE,
    connector20_edge,
  });
}

// execute the main function
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    // close Prisma Client at the end
    await prisma.$disconnect();
  });
